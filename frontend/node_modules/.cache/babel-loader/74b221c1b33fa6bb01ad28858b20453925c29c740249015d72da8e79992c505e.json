{"ast":null,"code":"var _jsxFileName = \"/Users/anishsoni/Desktop/Lumen/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [description, setDescription] = useState(\"\");\n  const [userInput, setUserInput] = useState(\"\");\n\n  // Function to handle input change\n  const handleInputChange = event => {\n    setUserInput(event.target.value);\n  };\n\n  // Function to send request to backend for capturing an image and getting description\n  const handleCaptureAndDescribe = async () => {\n    const response = await fetch(\"http://localhost:5001/generate-description\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        user_input: userInput\n      }) // Send user input to the backend\n    });\n    if (response.ok) {\n      // Check if the response is successful\n      const data = await response.json();\n      setDescription(data.description);\n      setUserInput(\"\"); // Clear input after submission\n\n      // Trigger speech output for the description\n      const speakResponse = await fetch(\"http://localhost:5001/speak\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          text: data.description\n        }) // Send description for TTS\n      });\n      if (speakResponse.ok) {\n        console.log('Speech request sent successfully');\n      } else {\n        console.error('Error speaking the description:', speakResponse.statusText);\n      }\n    } else {\n      console.error('Error generating description:', response.statusText);\n    }\n  };\n\n  // Function to start voice recognition\n  const startVoiceRecognition = () => {\n    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n    const recognition = new SpeechRecognition();\n    recognition.onstart = () => {\n      console.log('Voice recognition started. Try speaking into the microphone.');\n    };\n    recognition.onresult = event => {\n      const transcript = event.results[0][0].transcript;\n      setUserInput(transcript); // Set the recognized text to userInput\n    };\n    recognition.onerror = event => {\n      console.error('Error occurred in recognition: ' + event.error);\n    };\n    recognition.onend = () => {\n      console.log('Voice recognition ended.');\n    };\n    recognition.start();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Image Caption Generator\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      value: userInput,\n      onChange: handleInputChange,\n      placeholder: \"Type your question here...\",\n      rows: 4,\n      cols: 50\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: startVoiceRecognition,\n      style: {\n        marginRight: \"10px\"\n      },\n      children: \"\\uD83C\\uDFA4 Start Speaking\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleCaptureAndDescribe,\n      children: \"Capture Image and Generate Description\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: description ? `Description: ${description}` : \"No description yet.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"0L1FkKTRqbJQb+UYv3kFnWpDPYk=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","App","_s","description","setDescription","userInput","setUserInput","handleInputChange","event","target","value","handleCaptureAndDescribe","response","fetch","method","headers","body","JSON","stringify","user_input","ok","data","json","speakResponse","text","console","log","error","statusText","startVoiceRecognition","SpeechRecognition","window","webkitSpeechRecognition","recognition","onstart","onresult","transcript","results","onerror","onend","start","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","placeholder","rows","cols","onClick","style","marginRight","_c","$RefreshReg$"],"sources":["/Users/anishsoni/Desktop/Lumen/frontend/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\n\nfunction App() {\n  const [description, setDescription] = useState(\"\");\n  const [userInput, setUserInput] = useState(\"\");\n\n  // Function to handle input change\n  const handleInputChange = (event) => {\n    setUserInput(event.target.value);\n  };\n\n  // Function to send request to backend for capturing an image and getting description\n  const handleCaptureAndDescribe = async () => {\n    const response = await fetch(\"http://localhost:5001/generate-description\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ user_input: userInput }),  // Send user input to the backend\n    });\n\n    if (response.ok) {  // Check if the response is successful\n      const data = await response.json();\n      setDescription(data.description);\n      setUserInput(\"\");  // Clear input after submission\n\n      // Trigger speech output for the description\n      const speakResponse = await fetch(\"http://localhost:5001/speak\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ text: data.description }),  // Send description for TTS\n      });\n\n      if (speakResponse.ok) {\n        console.log('Speech request sent successfully');\n      } else {\n        console.error('Error speaking the description:', speakResponse.statusText);\n      }\n    } else {\n      console.error('Error generating description:', response.statusText);\n    }\n};\n\n\n  // Function to start voice recognition\n  const startVoiceRecognition = () => {\n    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n    const recognition = new SpeechRecognition();\n\n    recognition.onstart = () => {\n      console.log('Voice recognition started. Try speaking into the microphone.');\n    };\n\n    recognition.onresult = (event) => {\n      const transcript = event.results[0][0].transcript;\n      setUserInput(transcript);  // Set the recognized text to userInput\n    };\n\n    recognition.onerror = (event) => {\n      console.error('Error occurred in recognition: ' + event.error);\n    };\n\n    recognition.onend = () => {\n      console.log('Voice recognition ended.');\n    };\n\n    recognition.start();\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Image Caption Generator</h1>\n      <textarea \n        value={userInput} \n        onChange={handleInputChange} \n        placeholder=\"Type your question here...\" \n        rows={4} \n        cols={50} \n      />\n      <br />\n      <button onClick={startVoiceRecognition} style={{ marginRight: \"10px\" }}>\n        ðŸŽ¤ Start Speaking\n      </button>\n      <button onClick={handleCaptureAndDescribe}>Capture Image and Generate Description</button>\n      <h2>{description ? `Description: ${description}` : \"No description yet.\"}</h2>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}